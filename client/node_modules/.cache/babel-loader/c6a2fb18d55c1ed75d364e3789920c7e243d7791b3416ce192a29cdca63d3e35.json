{"ast":null,"code":"var _jsxFileName = \"D:\\\\resume-gpt\\\\gpt-resume\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './normal.css';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport SideMenu from './SideMenu';\nimport ChatBox from './ChatBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    getEngines();\n  }, []);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatInput1, setChatInput1] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [temperature, setTemperature] = useState(0.5);\n  const [currentModel, setCurrentModel] = useState(\"text-davinci-003\");\n  const [chatLog, setChatLog] = useState([{}]);\n\n  // clear chats\n  function clearChat() {\n    setChatLog([]);\n  }\n  function getEngines() {\n    fetch(\"http://localhost:3080/models\").then(res => res.json()).then(data => {\n      console.log(data.models.data);\n\n      // set models in order alpahbetically\n      data.models.data.sort((a, b) => {\n        if (a.id < b.id) {\n          return -1;\n        }\n        if (a.id > b.id) {\n          return 1;\n        }\n        return 0;\n      });\n      setModels(data.models.data);\n    });\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"me\",\n      message: `${chatInput} ${chatInput1}`\n    }];\n    setChatInput(\"\");\n    setChatInput1(\"\");\n    setChatLog(chatLogNew);\n\n    // fetch response to the api combining the chat log array of messages and seinding it as a message to localhost:3000 as a post\n    const messages = chatLogNew.map(message => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel\n      })\n    });\n    const data = await response.json();\n    setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n    var scrollToTheBottomChatLog = document.getElementsByClassName(\"chat-log\")[0];\n    scrollToTheBottomChatLog.scrollTop = scrollToTheBottomChatLog.scrollHeight;\n  }\n  function handleTemp(temp) {\n    if (temp > 1) {\n      setTemperature(1);\n    } else if (temp < 0) {\n      setTemperature(0);\n    } else {\n      setTemperature(temp);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      chatInput: chatInput,\n      setChatInput: setChatInput,\n      setChatInput1: setChatInput1,\n      handleSubmit: handleSubmit,\n      clearChat: clearChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      chatInput: chatInput,\n      chatLog: chatLog,\n      setChatInput: setChatInput,\n      setChatInput1: setChatInput1,\n      handleSubmit: handleSubmit,\n      clearChat: clearChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FOF3RSNQDVYyJXY7047DVUXcCxU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","SideMenu","ChatBox","App","getEngines","chatInput","setChatInput","chatInput1","setChatInput1","models","setModels","temperature","setTemperature","currentModel","setCurrentModel","chatLog","setChatLog","clearChat","fetch","then","res","json","data","console","log","sort","a","b","id","handleSubmit","e","preventDefault","chatLogNew","user","message","messages","map","join","response","method","headers","body","JSON","stringify","scrollToTheBottomChatLog","document","getElementsByClassName","scrollTop","scrollHeight","handleTemp","temp"],"sources":["D:/resume-gpt/gpt-resume/client/src/App.js"],"sourcesContent":["import './normal.css';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport SideMenu from './SideMenu'\nimport ChatBox from './ChatBox'\n\nfunction App() {\n\n  useEffect(() => {\n    getEngines();\n  }, [])\n\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatInput1, setChatInput1] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [temperature, setTemperature] = useState(0.5);\n  const [currentModel, setCurrentModel] = useState(\"text-davinci-003\");\n  const [chatLog, setChatLog] = useState([{ \n  }]);\n\n  // clear chats\n  function clearChat(){\n    setChatLog([]);\n  }\n\n  function getEngines(){\n    fetch(\"http://localhost:3080/models\")\n    .then(res => res.json())\n    .then(data => {\n      console.log(data.models.data)\n      \n      // set models in order alpahbetically\n      data.models.data.sort((a, b) => {\n        if(a.id < b.id) { return -1; }\n        if(a.id > b.id) { return 1; }\n        return 0;\n      })\n      setModels(data.models.data)\n    })\n  }\n  \n  async function handleSubmit(e){\n    e.preventDefault();\n\n    let chatLogNew = [...chatLog, { user: \"me\", message: `${chatInput} ${chatInput1}`} ]\n    setChatInput(\"\");\n    setChatInput1(\"\");\n    setChatLog(chatLogNew)\n    \n\n  \n    // fetch response to the api combining the chat log array of messages and seinding it as a message to localhost:3000 as a post\n    const messages = chatLogNew.map((message) => message.message).join(\"\\n\")\n    \n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel,\n       })\n\n      });\n    const data = await response.json();\n    setChatLog([...chatLogNew, { user: \"gpt\", message: `${data.message}`} ])\n    var scrollToTheBottomChatLog = document.getElementsByClassName(\"chat-log\")[0];\n    scrollToTheBottomChatLog.scrollTop = scrollToTheBottomChatLog.scrollHeight;\n  }\n\n  function handleTemp(temp) {\n    if(temp > 1){\n      setTemperature(1)\n    } else if (temp < 0){\n      setTemperature(0)\n    } else {\n      setTemperature(temp)\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <SideMenu\n        chatInput={chatInput}\n        setChatInput={setChatInput}\n        setChatInput1={setChatInput1} \n        handleSubmit={handleSubmit}\n        clearChat={clearChat}\n      />\n      <ChatBox \n        chatInput={chatInput}\n        chatLog={chatLog} \n        setChatInput={setChatInput}\n        setChatInput1={setChatInput1} \n        handleSubmit={handleSubmit} \n        clearChat={clearChat} />\n  \n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}